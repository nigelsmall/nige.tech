= What's New in Py2neo v3?

Py2neo is a client library and toolkit for working with [[http://neo4j.com/|Neo4j]] from within Python applications and from the command line.
The latest version is //v3 beta 1// and can be installed with:

``` bash
$ pip install py2neo==3b1
```

Lots of things have changed between py2neo v2 and py2neo v3.
Here's a summary of the main changes.

== A New Bolt-Compatible Core

Version 3 provides support for [[http://neo4j.com/docs/3.0.0-SNAPSHOT/bolt.html|Bolt]], the new native binary protocol developed for Neo4j.
If available, Bolt will be used automatically by the library instead of the older HTTP/REST API.
To allow [[http://neo4j.com/docs/3.0.0-SNAPSHOT/bolt.html|Bolt]] and [[http://neo4j.com/docs/3.0.0-SNAPSHOT/rest-api.html|HTTP]] to work side-by-side, a significant chunk of the library's internals have been rewritten and, by extension, a lot of the APIs have been updated.

=== The DBMS

In version 2, the [[http://py2neo.org/2.0/internals.html#service-root|``ServiceRoot``]] class represented a root REST resource, such as ``http://localhost:7474/``.
This has now been replaced by the [[http://py2neo.org/v3/database.html#py2neo.database.DBMS|``DBMS``]] class which maps to a single installation of Neo4j, as opposed to the graph database exposed by the [[http://py2neo.org/v3/database.html#py2neo.database.Graph|``Graph``]] class.
The distinction between the //graph// and the //DBMS// will become more prominent when multi-tenancy is introduced in a future Neo4j release.

=== URIs & Authentication

//TODO//

== Cypher Execution

As part of the rewrite, a lot of the functionality that was previously provided by REST resources and other parts of the HTTP API now uses Cypher internally instead.
Additionally, many of the classes involved with Cypher execution and result handling have evolved.

=== Simple Queries

Cypher queries can now be executed directly from a [[http://py2neo.org/v3/database.html#py2neo.database.Graph|``Graph``]] instance.
Instead of using ``graph.cypher.execute(...)``, you now simply need [[http://py2neo.org/v3/database.html#py2neo.database.Graph.run|``graph.run(...)``]].
For example:

``` python
>>> from py2neo import Graph
>>> graph = Graph(password="password")
>>> for record in graph.run("UNWIND range(1, 3) AS n RETURN n"):
...     print(record["n"])
1
2
3
```

To retrieve a single value from a query, use the [[http://py2neo.org/v3/database.html#py2neo.database.Graph.evaluate|``evaluate``]] method:

``` python
>>> graph.evaluate("MATCH (a) WHERE a.name={x} RETURN count(a)", x="Alice")
13
```

=== Transactions

Transactions are far more powerful in v3 than they were in v2.
Most of the functionality previously exposed as [[http://py2neo.org/2.0/cypher.html#tasks|tasks]] and [[http://py2neo.org/2.0/cypher.html#builders|builders]] is now available directly as methods.
Take for example [[http://py2neo.org/v3/database.html#py2neo.database.Transaction.create|Transaction.create]]:

``` python
>>> from py2neo import Node, Relationship
>>> tx = graph.begin()
>>> a = Node("Person", name="Alice")
>>> tx.create(a)
>>> b = Node("Person", name="Bob")
>>> ab = Relationship(a, "KNOWS", b)
>>> tx.create(ab)
>>> tx.commit()
>>> graph.exists(ab)
True
```

Transactions should also be used as a replacement for batches.
While batches still exist as part of the [[http://py2neo.org/v3/ext/batman.html|batman]] extension, they should be considered deprecated and very, very legacy.
To be clear: use transactions, not batches.

Transactions. Not batches.

=== Cursors

Cypher results are now retrieved lazily instead of eagerly built into a list of records.
Each call to [[http://py2neo.org/v3/database.html#py2neo.database.Transaction.run|``run``]] returns a [[http://py2neo.org/v3/database.html#cursors|cursor]] that provides access to the underlying data.

== Composable Graph Objects

Nodes, Relationships, Subgraphs and Walkables...

== Extensions

=== Batches & Manual Indexing

=== Spatial

== Neokit
